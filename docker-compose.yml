services:
  db:
    image: mysql:latest
    container_name: db-app
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql #inicia la db
      - db-data:/var/lib/mysql
    ports:
      - "${HOST_DB_PORT}:${CONTAINER_DB_PORT}"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-app
    restart: always
    environment:
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: db # Nombre del servicio de la DB
      DB_PORT: ${CONTAINER_DB_PORT} #contenedor
      DB_DATABASE: ${DB_DATABASE}
    ports:
      - "${BACKEND_HOST_PORT}:${BACKEND_CONTAINER_PORT}"
    depends_on:
      db:
        condition: service_healthy # Espera hasta que el servicio de la DB esté "healthy"

  frontend:
    # No tengo tu Dockerfile, pero aquí va la lógica.
    build:
      context: ./frontend
    container_name: frontend-app
    ports:
      - "${FRONTEND_HOST_PORT}:${FRONTEND_CONTAINER_PORT}"
    depends_on:
    - backend

volumes:
  db-data:
    
networks:
  app-network:
    driver: bridge